g
g<- ggplot(data.frame(results$`Acc OOB`,results$`Acc Test`, aes(x =results$ntree,y=value, color = variable) ))
g<- ggplot(data.frame(results$`Acc OOB`,results$`Acc Test`), aes(x =results$ntree,y=value, color = variable) )
g
results[,1,2,3]
results[,1:3]
results[,c(1,3,4)]
res<-results[,c(1,3,4)]
value
g<- ggplot(res, aes(x =results$ntree,y=res[,c(1,2)], color = variable) )
g
g<- ggplot(res, aes(x =results$ntree,y=res[,c(1,2)], color = res[,c(1,2)]) )
g
g<- ggplot(res, aes(x =results$ntree,y=res[,c(1,2)]) )
g
df <- data.frame(results[,c(1,3,4)])
df
ggplot(df, aes(x=df$ntree, y = value, color = variable)) +
geom_point(aes(y = df$`Acc OOB`, col = "results$`Acc OOB`")) +
geom_point(aes(y = df$`Acc Test`, col = "results$`Acc Test`"))
df
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
df
df <- data.frame(results[,c(1,3,4)])
df
ggplot(df, aes(x=df$ntree, y = value, color = variable)) +
geom_point(aes(y = df$`Acc OOB`, col = "df$`Acc OOB`")) +
geom_point(aes(y = df$`Acc Test`, col = "df$`Acc Test`"))
df
df$Acc.OOB
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
df$results..Acc.OOB.
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
ggplot(df, aes(x=results$ntree, y = value, color = variable)) +
geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) +
geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
df
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g + geom_text(show.legend = TRUE,label=c("OOB", "Test"))
g
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g
g+labs(fill = "Dose (mg)")
g+labs(fill = "Dose (mg)")
g
g+ theme(legend.position="top")
g+ theme(legend.position="bottom")
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"), values = c("blue", "red"))
g<- ggplot(results, aes(x =results$ntree,y=results$`Acc OOB` )) + geom_point(size = 2) + geom_point(aes(y = results$`Acc Test`),size =2, colour = "green")
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g + geom_text(show.legend = TRUE,label=c("OOB", "Test"))
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"), values = c("blue", "red"))
g<- ggplot(res, aes(x =results$ntree,y=res[,c(1,2)]) )
g
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g + geom_text(show.legend = TRUE,label=c("OOB", "Test"))
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"), values = c("blue", "red"))
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g+ theme(legend.position="bottom")
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"), values = c("blue", "red"))
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g+ theme(legend.position="bottom")
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"))
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g+ theme(legend.position="bottom")
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"), values = c("pink", "green"))
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g+ theme(legend.position="bottom")
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g+ theme(legend.position="bottom")
g+ labs(title = "Accuracy Measure\n") +
scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g< -g+ theme(legend.position="bottom")
g<- g+ theme(legend.position="bottom")
g<- g+ labs(title = "Accuracy Measure\n") +scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g<- g+ theme(legend.position="bottom")
g<- g+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
g<- g+guides(color=guide_legend("my title"))+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
g<- g+ theme(legend.position="side")
g<- g+guides(color=guide_legend("Accuracy Measure"))+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
g<- g+ theme(legend.position="side")
g<- g+guides(color=guide_legend("Accuracy Measure"))+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`")) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"))
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
#g<- g+ theme(legend.position="bottom")
g<- g+guides(color=guide_legend("Accuracy Measure"))+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`"),size = 2) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"),size = 2)
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
#g<- g+ theme(legend.position="bottom")
g<- g+guides(color=guide_legend("Accuracy Measure"))+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`"),size = 2) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"),size = 2)
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
#g<- g+ theme(legend.position="bottom")
g<- g+guides(color=guide_legend("Accuracy Measure"))+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
install.packages("ggparty")
rf<- randomForest(formulae, data = census_train, importance =T, localImp = T)
rf
#     ----------------------------------- Testing model --------------------------------      #
pred<- predict(rf, newdata = census_test)
res<-table(pred,census_test$income)
(res[1,1]+res[2,2])/(sum(res))
#     --------------------------------- Extracting the Tree --------------------------------      #
treevisual<-getTree(rf,1,labelVar = T)
t<-grow(rf,1)
t
treevisual
library(ggparty)
is.ggplot(ggparty(treevisual))
is.ggplot(ggparty(t))
ggparty(t)
ggparty(treevisual)
important_variables((measure_importance(rf), k = 2))
important_variables(measure_importance(rf), k = 2)
#     ------------------------------- Additional visualizations ------------------------------      #
plot(rf, main = "Error rates/MSE for Random forest object") #Plot the error rates or MSE of a randomForest objec
plot(margin(rf,census_test$income))
rf$importance
varImpPlot(rf, main = 'Variable Importance')
## Using different symbols for the classes:
MDSplot(rf, census_train$income,k=2, palette=rep(1, 3), pch=as.numeric(census_train$income))
rf$proximity
hist(treesize(rf), main = "Tree Size") #Size of trees (number of nodes) in and ensemble
tunedf<-census[,c(2:10,12,14,15)]
classvec<-census$income
t<-tuneRF(tunedf,classvec,mtryStart = 1,ntreeTry = numbtree[i],stepfactor=1,improve = 0.05, doBest = T)
tunedf<-census[,c(2:10,12,14,15)]
classvec<-census$income
t<-tuneRF(tunedf,classvec,mtryStart = 1,ntreeTry = 100 ,stepfactor=1,improve = 0.05, doBest = T)
results <- data.frame(matrix(ncol = 8, nrow = 0))
x <- c("ntree","mtry","Acc OOB", "Acc Test","Precision","Recall","Specificity","F1 Score")
colnames(results) <- x
results[c('ntree','mtry','Acc OOB' ,'Acc Test','Precision','Recall','Specificity','F1 Score')]
numbtree <-seq(10,200,by = 10 )
mtrys <- seq(1,12)
for (i in 1:length(numbtree))
{
accTest <-c()
accOOB <-c()
precision <-c()
recalls <-c()
specificity <-c()
f1score <-c()
for(j in 1:length(mtrys))
{
accTest1 <-c()
accOOB1 <-c()
precision1 <-c()
recalls1 <-c()
specificity1 <-c()
f1score1 <-c()
for(num in 1:20)
{
set.seed(num)
data1 <-sample(2,nrow(census),prob = c(0.7,0.3), replace = T)
census_train <- census[data1==1,]
census_test <- census[data1==2,]
rf<- randomForest(formulae, data = census_train, ntree=numbtree[i], mtry=mtrys[j], importance =T)
confTr<-rf$confusion
accOOB1 =  c(accOOB1,(confTr[1,1] + confTr[2,2]) / (confTr[1,1] + confTr[1,2] + confTr[2,1]+ confTr[2,2]))
#- Accuracy = (TP+TN)/(TP+FP+FN+TN)
# How many individual were labeled correctly inthe respective classes(earnings below 50K or above 50k)
pred<- predict(rf, newdata = census_test)
confTest<-table(pred,census_test$income)
accTest1= c(accTest1,(confTest[1,1] + confTest[2,2]) / (confTest[1,1] + confTest[1,2] + confTest[2,1]+ confTest[2,2]))
#- Precision = TP/(TP+FP)
# How many individuals earning above 50K were correctly identified to be high earners
precision1 = c(precision1,(confTest[1,1]) / (confTest[1,1] + confTest[1,2]))
#- Recall(aka Sensitivity) = TP/(TP+FN)
# Of all the people who are High Earners, how many of those we correctly predict?
recalls1 = c(recalls1,(confTest[1,1]) / (confTest[1,1] + confTest[2,1]))
#- Specificity = TN/(TN+FP)
# Of all the people who are earning, how many of those did we correctly predict?
specificity1 = c(specificity1,(confTest[2,2]) / (confTest[1,2] + confTest[2,2]))
#- F1-score (aka F-Score / F-Measure) = 2*(Recall * Precision) / (Recall + Precision)
# some sort of balance between precision (p) & recall (r) in the system.
f1score1 = c(f1score1,2*(recalls1 * precision1) / (recalls1 + precision1))
}
accOOB = c(accOOB,mean(accOOB1))
accTest = c(accTest,mean(accTest1))
precision <-c(precision,mean(precision1))
recalls <-c(recalls,mean(recalls1))
specificity <-c(specificity,mean(specificity1))
f1score <-c(f1score,mean(f1score1))
sd_Test = sd(accOOB1)
sd_OOB = sd(accTest1)
cat(i,".",j,": ntree = ",numbtree[i]," mtry = ",mtrys[j],", errors = ",max(accOOB),",",max(accTest),"\n")
}
results[i,'ntree']<- numbtree[i]
results[i,'mtry']<- mtrys[j]
results[i,'Acc OOB']<- max(accOOB)
results[i,'Acc Test']<- max(accTest)
results[i,'Precision']<- max(precision)
results[i,'Recall']<- max(recalls)
results[i,'Specificity']<- max(specificity)
results[i,'F1 Score']<- max(f1score)
}
results
df <- data.frame(results$ntree, results$`Acc OOB`, results$`Acc Test`)
g<- ggplot(df, aes(x=results$ntree, y = value, color = variable)) +  geom_point(aes(y = results$`Acc OOB`, col = "results$`Acc OOB`"),size = 2) + geom_point(aes(y = results$`Acc Test`, col = "results$`Acc Test`"),size = 2)
g<- g + scale_x_continuous(name="no of trees", limits=c(0, max(numbtree)),(breaks = seq(0, max(numbtree), by = (max(numbtree)/length(numbtree)) )))
g<- g + scale_y_continuous(name="accuracy", limits=c(0.82, 0.9), (breaks = seq(0.8,0.88, by = 0.02)))
g<- g + ggtitle("OOB VS Test Accuracy")+ labs(y="Accuracy", x = "no of trees")
#g<- g+ theme(legend.position="bottom")
g<- g+guides(color=guide_legend("Accuracy Measure"))+scale_color_manual(labels = c("OOB", "Test"), values = c("black", "green"))
g
varImpPlot(rf, main = 'Variable Importance')
## Using different symbols for the classes:
MDSplot(rf, census_train$income,k=2, palette=rep(1, 3), pch=as.numeric(census_train$income))
## Using different symbols for the classes:
MDSplot(rf, census_train$income,k=2, palette=rep(1, 3), pch=as.numeric(census_train$income))
## Using different symbols for the classes:
rf$proximity
hist(treesize(rf), main = "Tree Size") #Size of trees (number of nodes) in and ensemble
# =================================================================================================================
#                                       Invoking respective Libraries
# =================================================================================================================
library(dplyr)
library(ggplot2)
theme_set(theme_bw())
library(randomForest)
library(Amelia)
library(inTrees)
library(OneR)
library(randomForestExplainer)
# =================================================================================================================
#                                  Reading the Census Dataset and viewing it
# =================================================================================================================
census = read.csv('census.csv')
setwd("H:/machine learning Models/Bagging_Random_forest_Project Arjun&Murali")
# =================================================================================================================
#                                  Reading the Census Dataset and viewing it
# =================================================================================================================
census = read.csv('census.csv')
#Basic Analysis Command , reading  the dataset
str(census)
summary(census)
glimpse(census)
#===========  1.Rename the column to improve readability and  reflect the factor levels ==============
names(census)[names(census)=="nativecountry"] <- "region"
names(census)[names(census)=="hoursperweek"] <- "hr_per_week"
names(census)[names(census)=="over50k"] <- "income"
names(census)[names(census)=="maritalstatus"] <- "marital"
names(census)[names(census)=="workclass"] <- "employer_type"
names(census)[names(census)=="sex"] <- "gender"
str(census)
any(is.na(census))
#======================================================================================================
# Combining the two smallest groups into a  single group called "Unemployed" by converting these objects into character data types (as.character() and then using sapply with a custom function.
# Combine State and Local gov jobs into a category called SL-gov
# Combine self-employed jobs into a category called self-emp
#=========================================================================================================
table(census$employer_type)
group_emp<-function(job){
job<-as.character(job)
if(job==' Never-worked'|job==' Without-pay'){
return('Unemployed')
}
else if(job==' State-gov'|job==' Local-gov'){
return('Govt')
}
else if(job==' Self-emp-inc'|job==' Self-emp-not-inc'){
return('self_emp')
}
else{
return(job)
}
}
census$employer_type<-sapply(census$employer_type,group_emp)
table(census$employer_type)
#=========================================================================================================
# Look at the marital data column an Reduce this to three groups:Married Not-Married Never-Married
#=========================================================================================================
levels(census$marital)
group_marital<-function(mar){
mar<-as.character(mar)
if(mar==' Separated'|mar==' Widowed'|mar==' Divorced'){
return('Not-Married')
}
else if (mar== ' Never-married'){
return('Never-married')
}
else{
return('Married')
}
}
census$marital<-sapply(census$marital,group_marital)
table(census$marital)
#=========================================================================================================
#Problem with country column(too many categories and will ruin learning)
# Going ahead to group the countries by continent
#=========================================================================================================
Asia<-c(' China',' Hong',' India',' Iran',' Cambodia',' Japan', ' Laos',
' Philippines' ,' Vietnam' ,' Taiwan', ' Thailand')
North.America <- c(' Canada',' United-States',' Puerto-Rico' )
Europe <- c(' England' ,' France', ' Germany' ,' Greece',' Holand-Netherlands',' Hungary',
' Ireland',' Italy',' Poland',' Portugal',' Scotland',' Yugoslavia')
Latin.and.South.America <- c(' Columbia',' Cuba',' Dominican-Republic',' Ecuador',
' El-Salvador',' Guatemala',' Haiti',' Honduras',
' Mexico',' Nicaragua',' Outlying-US(Guam-USVI-etc)',' Peru',
' Jamaica',' Trinadad&Tobago')
Other <- c('South')
group_country <- function(ctry){
if (ctry %in% Asia){
return('Asia')
}else if (ctry %in% North.America){
return('North.America')
}else if (ctry %in% Europe){
return('Europe')
}else if (ctry %in% Latin.and.South.America){
return('Latin.and.South.America')
}else{
return('Other')
}
}
census$region <- sapply(census$region,group_country)
table(census$region)
census[census == ' ?'] <- NA
census$employer_type <- sapply(census$employer_type,factor)
census$region <- sapply(census$region,factor)
census$marital <- sapply(census$marital,factor)
census$occupation <- sapply(census$occupation,factor)
# I am going to use missmap to see the missing values
missmap(census)
missmap(census,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
#omit NA values if any(backup contingency)
census <- na.omit(census)
ggplot(census,aes(age)) + geom_histogram(aes(fill=census$income),color='black',binwidth=1) + theme_bw()
#Recheck for missing values
missmap(census)
missmap(census,y.at=c(1),y.labels = c(''),col=c('yellow','black'))
#Create a barplot of region with the fill color defined by income class.
ggplot(census,aes(region)) + geom_bar(aes(fill=census$income),color='black')+theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1)) + ggtitle("Region wise income")
levels(census$education)[levels(census$education)==c(" Preschool"," 1st-4th"," 5th-6th"," 7th-8th"," 9th"," 10th"," HS-grad"," 11th"," 12th",
" Assoc-acdm"," Assoc-voc"," Prof-school"," Some-college",
" Bachelors"," Masters"," Doctorate")]<- c("Preschool","1st-4th","5th-6th",
"7th-8th","9th","10th","HS-grad",
"11th","12th","Assoc-acdm","Assoc-voc",
"Prof-school","Some-college","Bachelors","Masters","Doctorate")
str(census)
# ggplot(diamonds)  # if only the dataset is known.
# ggplot(diamonds, aes(x=carat))  # if only X-axis is known. The Y-axis can be specified in respective geoms.
# ggplot(diamonds, aes(x=carat, y=price))  # if both X and Y axes are fixed for all layers.
# ggplot(diamonds, aes(x=carat, color=cut))  # Each category of the 'cut' variable will now have a distinct  color, once a geom is added.
ggplot(census, aes(x=census$gender)) + geom_bar() + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Gender Stats")+ labs(y="Count(in thousand)", x = "Gender")
ggplot(census, aes(x=census$employer_type)) + geom_bar() + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Working Class")+ labs(y="Count(in thousand)", x = "Working Class")
ggplot(census, aes(x=census$education)) + geom_bar() + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Education Level")+ labs(y="Count(in thousand)", x = "Educational Qualification")
ggplot(census, aes(x=census$marital)) + geom_bar()+ theme(axis.text.x = element_text(angle = 90))+ ggtitle("Individuals Martial Status")+ labs(y="Count(in thousand)", x = "Marital Status")
ggplot(census, aes(x=census$occupation)) + geom_bar()+ theme(axis.text.x = element_text(angle = 90))+ ggtitle("Individuals Profession")+ labs(y="Count(in thousand)", x = "Profession")
ggplot(census, aes(x=census$race)) + geom_bar()+ theme(axis.text.x = element_text(angle = 90))+ ggtitle("Ethnic diversity")+ labs(y="Count(in thousand)", x = "Ethnicity")
ggplot(census, aes(x=census$income)) + geom_bar() + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Income")+ labs(y="Count(in thousand)", x = "Income bracket")
ggplot(census, aes(x= census$employer_type)) + geom_bar(aes(fill = factor(income)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Income breakage for diff employer type")+ labs(y="No of Individual", x = "Employer type",fill = "Income")
ggplot(census, aes(x= census$education)) +  geom_bar(aes(fill = factor(income)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Income based on Educational Qualification")+ labs(y="No of Individual", x = "Educational Qualification",fill = "Income") + coord_flip()
# table(census$employer_type,census$income)
# table(census$education,census$income)
# table(census$occupation,census$income)
# table(census$employer_type,census$race)
# table(census$gender,census$income)
# table(census$employer_type,census$occupation)
table(census$education,income)
# table(census$employer_type,census$income)
# table(census$education,census$income)
# table(census$occupation,census$income)
# table(census$employer_type,census$race)
# table(census$gender,census$income)
# table(census$employer_type,census$occupation)
table(census$education,census$income)
# table(census$employer_type,census$income)
# table(census$education,census$income)
# table(census$occupation,census$income)
# table(census$employer_type,census$race)
# table(census$gender,census$income)
# table(census$employer_type,census$occupation)
sum(table(census$education,census$income))
ggplot(census, aes(x= census$occupation)) + geom_bar(aes(fill = factor(income)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90))+ ggtitle("Income based on Profession")+ labs(y="income", x = "Profession",fill = "Income") + coord_flip()
ggplot(census, aes(x= census$gender)) + geom_bar(aes(fill = factor(income)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90))+ ggtitle("Gender Based Income breakage")+ labs(y="income", x = "Gender",fill = "Income") + coord_flip()
ggplot(census, aes(x= census$marital)) + geom_bar(aes(fill = factor(income)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90))+ ggtitle("Income breakage based on Marital Status")+ labs(y="No of Individual", x = "Marital Status",fill = "Income")
ggplot(census, aes(x= census$marital)) + geom_bar(aes(fill = factor(gender)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90))+ ggtitle("Marital Status V/S Gender")+ labs(y="No of Individual", x = "Marital Status",fill = "Gender")
ggplot(census, aes(x= census$employer_type)) + geom_bar() + theme(axis.text.x = element_text(angle = 90)) + geom_bar(aes(fill = factor(race)))+ ggtitle("Ethnicity V/S Employer type")+ labs(y="No of Individual", x = "Employer type",fill = "Ethnicity")
ggplot(census, aes(x= census$education)) + geom_bar() + theme(axis.text.x = element_text(angle = 90)) + geom_bar(aes(fill = factor(occupation))) + ggtitle("Education V/S Occupation")+ labs(y="No of Individual", x = "Education",fill = "Occupation")
ggplot(census, aes(x= census$age)) + geom_bar() + facet_grid(~ census$income)+ theme(axis.text.x = element_text(angle = 90)) + ggtitle("Age V/S Income")+ labs(y="No of Individuals", x = "Age")
#ggplot(census, aes(x= census$gender)) + geom_bar() + facet_grid(~ census$income)+ theme(axis.text.x = element_text(angle = 90))
ggplot(census, aes(x= census$occupation)) + geom_bar() + facet_grid(~ census$income)+ theme(axis.text.x = element_text(angle = 90))+ ggtitle("Occupation V/S Income Earned")+ labs(y="No of Individuals", x = "Occupation")
ggplot(census, aes(x= census$occupation)) + geom_bar() + facet_grid(~ census$employer_type)+ theme(axis.text.x = element_text(angle = 90))+ ggtitle("Occupation V/S employer type")+ labs(y="No of Individuals", x = "Occupation")
ggplot(census, aes(x= census$employer_type)) + geom_bar() + facet_grid(~ census$marital)+ theme(axis.text.x = element_text(angle = 90))+ ggtitle("Marital Status & preference for Employer type")+ labs(y="No of Individuals", x = "Employer type")
ggplot(census, aes(x= census$capitalloss)) + geom_histogram() + facet_grid(~ census$income)+ theme(axis.text.x = element_text(angle = 90)) + ggtitle("Age V/S Income")+ labs(y="No of Individuals", x = "Age")
pct <- (table(census$income)/sum(table(census$income)))*100
pct
pie(table(census$income), labels = paste(c("below 50K", "above 50K"), round(pct,2), "%"),col = c("pink","brown"),main = 'Income % share')
# -----------------------------------------------------------------------------------------------
pct <- (table(census$gender)/sum(table(census$gender)))*100
pct
pie(table(census$gender), labels = paste(c("Female", "Male"), round(pct,2), "%"),col = c("pink","brown"),main = 'gender % share')
# -----------------------------------------------------------------------------------------------
pct <- (table(census$marital)/sum(table(census$marital)))*100
pct
pie(table(census$marital), labels = paste(c("Never-married","Married","Not-Married" ), round(pct,2), "%"),main = 'Marital status % share')
# -----------------------------------------------------------------------------------------------
pct <- (table(census$relationship)/sum(table(census$relationship)))*100
pct
pie(table(census$relationship), labels = paste(c(" Husband"," Not-in-family"," Other-relative"," Own-child"," Unmarried"," Wife"), round(pct,2), "%"),main = 'Relationship status % share')
# Few R Feature checks
table(census$gender,census$education,census$income)
ftable(census$gender,census$education,census$income )
census[,2]   #column access
census[2,]    # row access
census[c(2,3),]   #printing 2 records
census[,c(2,4,5)]  #printing selected column
extractAgeGroup <- function(age)
{
if (age <= 30) return("Young")
else if (age <= 45) return("Middle")
else if (age <= 60) return("Senior")
else if (age <= 75) return("Top-Senior")
else return ("Retired")
}
extractAgeGroup(77)
AgeGroups <-NULL
for (i in 1:nrow(census))
{
AgeGroups <- c(AgeGroups,extractAgeGroup(census$age[i]))
}
census$AgeGroups = as.factor(AgeGroups)
census$AgeGroups
p<-barplot(table(census$income,census$AgeGroups), beside = TRUE, legend.text = c("below 50K", "above 50K"),col = c("pink","brown"),las=2,border = 0)
title('Marital Status Breakage')
ggplot(census, aes(x=census$AgeGroups)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))+ ggtitle("Experience Breakage")+ labs(y="Count(in thousand)", x = "Experience Bracket")
ggplot(census, aes(x= census$AgeGroups)) + geom_bar(aes(fill = factor(income)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90)) + ggtitle("Experience V/S Income")+ labs(y="Count(in thousand)", x = "Experience", fill = "Income")
extractworkhour <- function(hour)
{
if (hour <= 25) return("Part-time")
else if (hour <= 45) return("Full-time")
else return ("Overtime")
}
WorkHour <-NULL
for (i in 1:nrow(census))
{
WorkHour <- c(WorkHour,extractworkhour(census$hr_per_week[i]))
}
census$WorkHour = as.factor(WorkHour)
# New variables/Attributes
p<-barplot(table(census$income,census$WorkHour), beside = TRUE, legend.text = c("below 50K", "above 50K"),col = c("pink","brown"),las=2,border = 0)
title('Marital Status Breakage')
ggplot(census, aes(x=census$WorkHour)) + geom_bar() + theme(axis.text.x = element_text(angle = 90))+ ggtitle("Working Hours Breakage")+ labs(y="No Of Individuals", x = "Working conditions")
ggplot(census, aes(x= census$WorkHour)) + geom_bar(aes(fill = factor(census$income)),position = 'dodge2') + theme(axis.text.x = element_text(angle = 90))  + ggtitle("Working Hours Breakdown")+ labs(y="Count(in thousand)", x = "Working conditions", fill = "Income")
table(census$capitalgain)
hist(census$capitalgain[census$capitalgain>"0"], main = "capital gain")
hist(census$capitalloss[census$capitalloss>"0"], main = "capital loss")
